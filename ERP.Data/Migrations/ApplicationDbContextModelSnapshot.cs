// <auto-generated />
using System;
using ERP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.CounterpartyPartner", b =>
                {
                    b.Property<long>("CounterpartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.HasKey("CounterpartyId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CounterpartyPartners");
                });

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.PartnerContactPeople", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .HasColumnType("int");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactPersonId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerContactPeople");
                });

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.TypeProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductKindId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProductKindId");

                    b.HasIndex("ProductKindId");

                    b.ToTable("TypeProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.AlcoholicLicense", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CounterpartyId")
                        .HasColumnType("bigint");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Number");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("AlcoholicLicenses");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Bank", b =>
                {
                    b.Property<long>("Bic")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Bic");

                    b.HasIndex("CountryCode");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BankAccount", b =>
                {
                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountOpened")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BankBic")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyTin")
                        .HasColumnType("bigint");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountNumber");

                    b.HasIndex("BankBic");

                    b.HasIndex("CompanyTin");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BusinessProposalProduct", b =>
                {
                    b.Property<string>("BusinessProposalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Sale")
                        .HasColumnType("real");

                    b.HasKey("BusinessProposalId", "ProductId", "PositionNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("BusinessProposalProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ClientOrderProduct", b =>
                {
                    b.Property<string>("ClientOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForCancel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Sale")
                        .HasColumnType("real");

                    b.HasKey("ClientOrderId", "ProductId", "PositionNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("ClientOrderProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Counterparty", b =>
                {
                    b.Property<long>("Tin")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Crtr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tin");

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Country", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Code2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Currency", b =>
                {
                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("CharacterCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.Property<float>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumericCode");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Document", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Number");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Partner", b =>
                {
                    b.Property<long>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.HasKey("PartnerId");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Person", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("Tin")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExcludeAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IncludeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Vat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("StorageUnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ProductKind", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("ProductKinds");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.StorageUnit", b =>
                {
                    b.Property<int>("StorageUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasuredValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageUnitId");

                    b.ToTable("StorageUnits");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.AgreementWithCustomer", b =>
                {
                    b.HasBaseType("ERP.Domain.Core.Models.Document");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeVat")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VatRate")
                        .HasColumnType("int");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("PartnerId");

                    b.ToTable("AgreementsWithCustomers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BusinessProposal", b =>
                {
                    b.HasBaseType("ERP.Domain.Core.Models.Document");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BusinessProposals");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ClientOrder", b =>
                {
                    b.HasBaseType("ERP.Domain.Core.Models.Document");

                    b.Property<string>("AgreementWithCustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("BusinessProposalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PercentOfPayment")
                        .HasColumnType("real");

                    b.Property<float>("PercentOfShipment")
                        .HasColumnType("real");

                    b.HasIndex("AgreementWithCustomerId");

                    b.HasIndex("BusinessProposalId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ClientOrders");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ContactPerson", b =>
                {
                    b.HasBaseType("ERP.Domain.Core.Models.Person");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Employee", b =>
                {
                    b.HasBaseType("ERP.Domain.Core.Models.Person");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime?>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Salary")
                        .HasColumnType("real");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.CounterpartyPartner", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Counterparty", "Counterparty")
                        .WithMany("CounterpartyPartners")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Partner", "Partner")
                        .WithMany("CounterpartyPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.PartnerContactPeople", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.ContactPerson", "ContactPerson")
                        .WithMany("PartnerContactPeople")
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Partner", "Partner")
                        .WithMany("PartnerContactPeople")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactPerson");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ERP.Domain.Core.Intermediary.TypeProduct", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Product", "Product")
                        .WithMany("TypeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.ProductKind", "ProductKind")
                        .WithMany("TypeProducts")
                        .HasForeignKey("ProductKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductKind");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.AlcoholicLicense", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Counterparty", "Counterparty")
                        .WithMany("AlcoholicLicenses")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Bank", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Country", "Country")
                        .WithMany("Banks")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BankAccount", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankBic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Counterparty", "Company")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CompanyTin");

                    b.HasOne("ERP.Domain.Core.Models.Country", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("CountryCode");

                    b.HasOne("ERP.Domain.Core.Models.Currency", "Currency")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BusinessProposalProduct", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.BusinessProposal", "BusinessProposal")
                        .WithMany("BusinessProposalProducts")
                        .HasForeignKey("BusinessProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Product", "Product")
                        .WithMany("BusinessProposalProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProposal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ClientOrderProduct", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.ClientOrder", "ClientOrder")
                        .WithMany("ClientOrderProducts")
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Product", "Product")
                        .WithMany("ClientOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Company", b =>
                {
                    b.OwnsOne("ERP.Domain.Core.Types.CompanyAddress", "Address", b1 =>
                        {
                            b1.Property<long>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LegalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LegalAddress");

                            b1.Property<string>("PhysicalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhysicalAddress");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyContacts", "Contacts", b1 =>
                        {
                            b1.Property<long>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Phone");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyInfo", "CompanyInfo", b1 =>
                        {
                            b1.Property<long>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Crtr")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Crtr");

                            b1.Property<DateTime>("RegistrationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("RegistrationDate");

                            b1.Property<string>("RegistrationNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RegistrationNumber");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyName", "Name", b1 =>
                        {
                            b1.Property<long>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FullName");

                            b1.Property<string>("WorkName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("WorkName");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address");

                    b.Navigation("CompanyInfo");

                    b.Navigation("Contacts");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Counterparty", b =>
                {
                    b.OwnsOne("ERP.Domain.Core.Types.CompanyAddress", "Address", b1 =>
                        {
                            b1.Property<long>("CounterpartyTin")
                                .HasColumnType("bigint");

                            b1.Property<string>("LegalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LegalAddress");

                            b1.Property<string>("PhysicalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhysicalAddress");

                            b1.HasKey("CounterpartyTin");

                            b1.ToTable("Counterparties");

                            b1.WithOwner()
                                .HasForeignKey("CounterpartyTin");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyContacts", "Contacts", b1 =>
                        {
                            b1.Property<long>("CounterpartyTin")
                                .HasColumnType("bigint");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Phone");

                            b1.HasKey("CounterpartyTin");

                            b1.ToTable("Counterparties");

                            b1.WithOwner()
                                .HasForeignKey("CounterpartyTin");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyName", "Name", b1 =>
                        {
                            b1.Property<long>("CounterpartyTin")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FullName");

                            b1.Property<string>("WorkName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("WorkName");

                            b1.HasKey("CounterpartyTin");

                            b1.ToTable("Counterparties");

                            b1.WithOwner()
                                .HasForeignKey("CounterpartyTin");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contacts");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Partner", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Employee", "ResponsiblePerson")
                        .WithMany("ResponsibleForPartners")
                        .HasForeignKey("ResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyAddress", "Address", b1 =>
                        {
                            b1.Property<long>("PartnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LegalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LegalAddress");

                            b1.Property<string>("PhysicalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhysicalAddress");

                            b1.HasKey("PartnerId");

                            b1.ToTable("Partners");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyContacts", "Contacts", b1 =>
                        {
                            b1.Property<long>("PartnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Phone");

                            b1.HasKey("PartnerId");

                            b1.ToTable("Partners");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.OwnsOne("ERP.Domain.Core.Types.CompanyName", "Name", b1 =>
                        {
                            b1.Property<long>("PartnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FullName");

                            b1.Property<string>("WorkName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("WorkName");

                            b1.HasKey("PartnerId");

                            b1.ToTable("Partners");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contacts");

                    b.Navigation("Name");

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Person", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Position", "Position")
                        .WithMany("People")
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Product", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.StorageUnit", "StorageUnit")
                        .WithMany("Products")
                        .HasForeignKey("StorageUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageUnit");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.AgreementWithCustomer", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Currency", "Currency")
                        .WithMany("AgreementsWithCustomers")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Document", null)
                        .WithOne()
                        .HasForeignKey("ERP.Domain.Core.Models.AgreementWithCustomer", "Number")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Models.Partner", "Partner")
                        .WithMany("AgreementsWithCustomers")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BusinessProposal", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Document", null)
                        .WithOne()
                        .HasForeignKey("ERP.Domain.Core.Models.BusinessProposal", "Number")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ClientOrder", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.AgreementWithCustomer", "AgreementWithCustomer")
                        .WithMany("ClientOrders")
                        .HasForeignKey("AgreementWithCustomerId");

                    b.HasOne("ERP.Domain.Core.Models.BusinessProposal", "BusinessProposal")
                        .WithMany("ClientOrders")
                        .HasForeignKey("BusinessProposalId");

                    b.HasOne("ERP.Domain.Core.Models.Company", "Company")
                        .WithMany("ClientOrders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ERP.Domain.Core.Models.Document", null)
                        .WithOne()
                        .HasForeignKey("ERP.Domain.Core.Models.ClientOrder", "Number")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AgreementWithCustomer");

                    b.Navigation("BusinessProposal");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ContactPerson", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ERP.Domain.Core.Models.ContactPerson", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Employee", b =>
                {
                    b.HasOne("ERP.Domain.Core.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ERP.Domain.Core.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ERP.Domain.Core.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Company", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Counterparty", b =>
                {
                    b.Navigation("AlcoholicLicenses");

                    b.Navigation("BankAccounts");

                    b.Navigation("CounterpartyPartners");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Country", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Banks");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Currency", b =>
                {
                    b.Navigation("AgreementsWithCustomers");

                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Partner", b =>
                {
                    b.Navigation("AgreementsWithCustomers");

                    b.Navigation("CounterpartyPartners");

                    b.Navigation("PartnerContactPeople");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Position", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Product", b =>
                {
                    b.Navigation("BusinessProposalProducts");

                    b.Navigation("ClientOrderProducts");

                    b.Navigation("TypeProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ProductKind", b =>
                {
                    b.Navigation("TypeProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.StorageUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.AgreementWithCustomer", b =>
                {
                    b.Navigation("ClientOrders");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.BusinessProposal", b =>
                {
                    b.Navigation("BusinessProposalProducts");

                    b.Navigation("ClientOrders");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ClientOrder", b =>
                {
                    b.Navigation("ClientOrderProducts");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.ContactPerson", b =>
                {
                    b.Navigation("PartnerContactPeople");
                });

            modelBuilder.Entity("ERP.Domain.Core.Models.Employee", b =>
                {
                    b.Navigation("ResponsibleForPartners");
                });
#pragma warning restore 612, 618
        }
    }
}
